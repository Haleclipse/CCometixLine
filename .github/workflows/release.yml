name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: ccline-linux-x64.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: ccline-linux-x64-static.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ccline-windows-x64.zip
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ccline-macos-x64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            name: ccline-macos-arm64.tar.gz

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package Linux/macOS
      if: matrix.os != 'windows-latest' && matrix.target != 'x86_64-pc-windows-msvc'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccometixline-packycc dist/ccline
        cd dist
        tar czf ../${{ matrix.name }} ccline

    - name: Package Windows
      if: matrix.target == 'x86_64-pc-windows-msvc'
      run: |
        mkdir dist
        copy "target\${{ matrix.target }}\release\ccometixline-packycc.exe" "dist\ccline.exe"
        cd dist
        7z a "..\${{ matrix.name }}" ccline.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*
        generate_release_notes: true
        draft: false
        prerelease: false

    - name: Setup Node.js for NPM
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Extract binaries from archives
      run: |
        mkdir -p extracted
        
        # macOS x64
        tar -xzf artifacts/ccline-macos-x64.tar.gz/ccline-macos-x64.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-darwin-x64
        
        # macOS ARM64
        tar -xzf artifacts/ccline-macos-arm64.tar.gz/ccline-macos-arm64.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-darwin-arm64
        
        # Linux x64
        tar -xzf artifacts/ccline-linux-x64.tar.gz/ccline-linux-x64.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-linux-x64
        
        # Linux musl (static)
        tar -xzf artifacts/ccline-linux-x64-static.tar.gz/ccline-linux-x64-static.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-linux-x64-musl
        
        # Windows
        unzip artifacts/ccline-windows-x64.zip/ccline-windows-x64.zip -d extracted
        mv extracted/ccline.exe extracted/ccline-win32-x64.exe
        
        # List extracted files
        ls -la extracted/

    - name: Prepare NPM packages
      run: |
        # Prepare packages with version management
        node npm/scripts/prepare-packages.js
        
        # Validate extracted binaries before copying
        echo "üîç Validating extracted binaries..."
        
        # Check macOS x64
        if [[ ! -f "extracted/ccline-darwin-x64" ]]; then
          echo "‚ùå Missing Darwin x64 binary"
          exit 1
        fi
        file extracted/ccline-darwin-x64
        
        # Check macOS ARM64
        if [[ ! -f "extracted/ccline-darwin-arm64" ]]; then
          echo "‚ùå Missing Darwin ARM64 binary"
          exit 1
        fi
        file extracted/ccline-darwin-arm64
        
        # Check Linux x64
        if [[ ! -f "extracted/ccline-linux-x64" ]]; then
          echo "‚ùå Missing Linux x64 binary"
          exit 1
        fi
        file extracted/ccline-linux-x64
        
        # Check Linux musl
        if [[ ! -f "extracted/ccline-linux-x64-musl" ]]; then
          echo "‚ùå Missing Linux x64-musl binary"
          exit 1
        fi
        file extracted/ccline-linux-x64-musl
        
        # Check Windows
        if [[ ! -f "extracted/ccline-win32-x64.exe" ]]; then
          echo "‚ùå Missing Windows x64 binary"
          exit 1
        fi
        file extracted/ccline-win32-x64.exe
        
        echo "‚úÖ All binaries validated successfully"
        
        # Copy binaries to platform directories
        cp extracted/ccline-darwin-x64 npm-publish/darwin-x64/ccline
        cp extracted/ccline-darwin-arm64 npm-publish/darwin-arm64/ccline
        cp extracted/ccline-linux-x64 npm-publish/linux-x64/ccline
        cp extracted/ccline-linux-x64-musl npm-publish/linux-x64-musl/ccline
        cp extracted/ccline-win32-x64.exe npm-publish/win32-x64/ccline.exe
        
        # Set executable permissions for Unix binaries
        chmod +x npm-publish/darwin-x64/ccline
        chmod +x npm-publish/darwin-arm64/ccline
        chmod +x npm-publish/linux-x64/ccline
        chmod +x npm-publish/linux-x64-musl/ccline
        
        # Final validation - check binaries in npm-publish directories
        echo "üîç Validating copied binaries in npm-publish directories..."
        for platform in darwin-x64 darwin-arm64 linux-x64 linux-x64-musl; do
          binary_path="npm-publish/$platform/ccline"
          if [[ ! -f "$binary_path" ]]; then
            echo "‚ùå Missing binary in $platform directory"
            exit 1
          fi
          if [[ ! -x "$binary_path" ]]; then
            echo "‚ùå Binary not executable in $platform directory"
            exit 1
          fi
          echo "‚úÖ $platform: binary ready"
        done
        
        # Check Windows binary
        if [[ ! -f "npm-publish/win32-x64/ccline.exe" ]]; then
          echo "‚ùå Missing Windows binary in npm-publish directory"
          exit 1
        fi
        echo "‚úÖ win32-x64: binary ready"
        
        # Verify packages
        echo "üìã Package structure verification:"
        find npm-publish -name "package.json" -exec echo "=== {} ===" \; -exec head -5 {} \;

    - name: Publish platform packages to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        # Function to publish with retry
        publish_with_retry() {
          local platform=$1
          local max_attempts=3
          local attempt=1
          
          cd npm-publish/$platform
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          while [ $attempt -le $max_attempts ]; do
            echo "üì¶ Publishing $PACKAGE_NAME (attempt $attempt/$max_attempts)"
            
            if npm publish --access public; then
              echo "‚úÖ Published $PACKAGE_NAME successfully"
              
              # Verify package is available on NPM registry
              echo "üîç Verifying $PACKAGE_NAME availability..."
              sleep 10
              
              if npm view $PACKAGE_NAME version >/dev/null 2>&1; then
                echo "‚úÖ Verified $PACKAGE_NAME is available on NPM"
                cd ../..
                return 0
              else
                echo "‚ö†Ô∏è  Package published but not yet available on registry, retrying verification..."
                sleep 15
                
                if npm view $PACKAGE_NAME version >/dev/null 2>&1; then
                  echo "‚úÖ Verified $PACKAGE_NAME is now available on NPM"
                  cd ../..
                  return 0
                fi
              fi
            fi
            
            echo "‚ùå Attempt $attempt failed for $PACKAGE_NAME"
            attempt=$((attempt + 1))
            
            if [ $attempt -le $max_attempts ]; then
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          echo "‚ùå Failed to publish $PACKAGE_NAME after $max_attempts attempts"
          cd ../..
          return 1
        }
        
        # Publish platform packages with retry logic
        echo "üöÄ Publishing platform packages with retry logic..."
        failed_packages=()
        
        for platform in darwin-x64 darwin-arm64 linux-x64 linux-x64-musl win32-x64; do
          if ! publish_with_retry $platform; then
            failed_packages+=($platform)
          fi
        done
        
        # Check if any packages failed
        if [ ${#failed_packages[@]} -gt 0 ]; then
          echo "‚ùå The following packages failed to publish:"
          printf '%s\n' "${failed_packages[@]}"
          echo "‚ùå Aborting release due to platform package failures"
          exit 1
        fi
        
        echo "‚úÖ All platform packages published successfully!"

    - name: Wait for NPM registry
      run: |
        echo "‚è≥ Waiting for platform packages to be available on NPM..."
        sleep 60

    - name: Publish main package to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd npm-publish/main
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        
        # Function to publish main package with retry
        publish_main_with_retry() {
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üì¶ Publishing $PACKAGE_NAME (attempt $attempt/$max_attempts)"
            
            if npm publish --access public; then
              echo "‚úÖ Published $PACKAGE_NAME successfully"
              
              # Verify package is available on NPM registry
              echo "üîç Verifying $PACKAGE_NAME availability..."
              sleep 10
              
              if npm view $PACKAGE_NAME version >/dev/null 2>&1; then
                echo "‚úÖ Verified $PACKAGE_NAME is available on NPM"
                return 0
              else
                echo "‚ö†Ô∏è  Package published but not yet available on registry, retrying verification..."
                sleep 15
                
                if npm view $PACKAGE_NAME version >/dev/null 2>&1; then
                  echo "‚úÖ Verified $PACKAGE_NAME is now available on NPM"
                  return 0
                fi
              fi
            fi
            
            echo "‚ùå Attempt $attempt failed for $PACKAGE_NAME"
            attempt=$((attempt + 1))
            
            if [ $attempt -le $max_attempts ]; then
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          echo "‚ùå Failed to publish $PACKAGE_NAME after $max_attempts attempts"
          return 1
        }
        
        # Publish main package
        if publish_main_with_retry; then
          echo "‚úÖ Main package published successfully!"
          echo ""
          echo "üéâ NPM packages published successfully!"
          echo "üì• Install with: npm install -g $PACKAGE_NAME"
          
          # Final verification - check that main package can find all dependencies
          echo "üîç Final verification - checking package dependencies..."
          if npm view $PACKAGE_NAME optionalDependencies >/dev/null 2>&1; then
            echo "‚úÖ Main package dependencies verified"
          else
            echo "‚ö†Ô∏è  Warning: Could not verify main package dependencies"
          fi
        else
          echo "‚ùå Failed to publish main package"
          exit 1
        fi