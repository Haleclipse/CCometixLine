name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

  build-nightly:
    name: Build Nightly (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: ccline-nightly-linux-x64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: ccline-nightly-linux-x64-static
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ccline-nightly-windows-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ccline-nightly-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: ccline-nightly-macos-arm64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package Linux/macOS
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccometixline-packycc dist/ccline
        cd dist
        tar czf ../${{ matrix.name }}-${{ github.sha }}.tar.gz ccline

    - name: Package Windows
      if: matrix.os == 'windows-latest'
      run: |
        mkdir dist
        copy "target\${{ matrix.target }}\release\ccometixline-packycc.exe" "dist\ccline.exe"
        cd dist
        7z a "..\${{ matrix.name }}-${{ github.sha }}.zip" ccline.exe

    - name: Upload nightly build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-${{ github.sha }}
        path: |
          ${{ matrix.name }}-${{ github.sha }}.tar.gz
          ${{ matrix.name }}-${{ github.sha }}.zip
        retention-days: 30

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, build-nightly]
    if: always()
    steps:
    - name: Print build summary
      run: |
        echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ **Tests:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build-nightly.result }}" == "success" ]]; then
          echo "✅ **Build:** All platforms built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Nightly Builds Available:" >> $GITHUB_STEP_SUMMARY
          echo "- Linux x64 (GNU libc)" >> $GITHUB_STEP_SUMMARY
          echo "- Linux x64 (static/musl)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows x64" >> $GITHUB_STEP_SUMMARY
          echo "- macOS x64 (Intel)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS ARM64 (Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Download artifacts from the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build:** Some platforms failed" >> $GITHUB_STEP_SUMMARY
        fi